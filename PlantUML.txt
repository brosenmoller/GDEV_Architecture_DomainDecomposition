@enduml

@startuml
!theme carbon-gray

title Hades - UML
header
  Assignment for HKU Game Dev Architecture
  Weapon System : Ben Rosenm√∂ller
  Keepsake System : Joeri van Alphen
endheader

'General Code
class PlayerCombatManager
{
  +int Health
  -WeaponManager weaponManager;
  -KeepsakeManager keepsakeManager;
  +void ProcessDamageEvent(Damage _damage)
}

class EventManager
{
  +Action<Damage damageInfo> OnPlayerAttack
  +Action OnPlayerSpawn
}

class Blackboard
{
  +int PlayerHealth
  +int PlayerMoneyAmount
}

PlayerCombatManager *-- WeaponManager
PlayerCombatManager *-- KeepsakeManager
PlayerCombatManager .u. EventManager

'Weapon System
class Damage
{
  +DamageHitInfo hitInfo;
  +int MainDamage;
  +int BackstabDamage;
  +bool IsPoisned;
}

struct DamageHitInfo 
{
  +bool BackstabDamage;
  +bool RangedDamage;
  +bool StandardAttackDamage;
  +bool SpecialAttackDamage;
  +bool DashAttackDamage;
  +WeaponData WeaponData
  +IDamageable damangeAble;
}

struct WeaponData 
{
  +int StandardAttackDamage;
  +int SpecialAttackDamage;
  +int DashAttackDamage;
}

interface IDamageable
{
  +void TakeDamage(Damage damage);
}

abstract class Weapon
{
  WeaponData baseWeaponData;
  +abstract void SpecialAttack();
  +abstract void StandardAttack();
}

skinparam groupInheritance 10
class StygianSword extends Weapon
class VarathaSpear extends Weapon
class AegisShield extends Weapon
class CoronachBow extends Weapon
class MalphonTwinfists extends Weapon
class ExagryphGun extends Weapon

class WeaponManager
{
  -Weapon[] unlockedWeapons;
  -Weapon equipedWeapon;
}

Weapon::baseWeaponData -u--> WeaponData
Weapon::StandardAttack .. DamageHitInfo
Weapon::SpecialAttack .. DamageHitInfo
'Weapon::SpecialAttack --> Player
'Weapon::StandardAttack --> Player

Weapon::SpecialAttack <-l InputManager
Weapon::StandardAttack <-l InputManager
WeaponManager *-- Weapon
Damage .d. DamageHitInfo
PlayerCombatManager .d. Damage
PlayerCombatManager::ProcessDamageEvent -l-> IDamageable

'Keepsake System
interface IKeepsake
{
   +void Register()
   +void Unregister()
   #void OnEventCalled(KeepsakeContext context)
}

class KeepsakeManager
{
  -KeepsakeInventory Inventory
  -KeepsakeListener Listener
}

class KeepsakeInventory
{
  -List<IKeepsake> unlockedKeepsakes
  -IKeepsake[] equipedKeepsakes
  +void Add(Keepsake keepsake)
  +void Set(int slot, Keepsake Keepsake)
}

class KeepsakeListener
{
  -Dictionary<KeepsakeEventType, Action<KeepsakeContext>> events
  +Action GetEvent(KeepsakeEventType eventType)
}

struct KeepsakeContext
{
  +Damage DamageInfo
}

enum KeepsakeEventType
{
  ON_PLAYER_SPAWN
  ON_PLAYER_ATTACK
  ON_PLAYER_HIT
}

IKeepsake::OnEventCalled -- KeepsakeListener
KeepsakeManager *-- KeepsakeInventory
KeepsakeManager *-- KeepsakeListener
KeepsakeInventory o-- IKeepsake
KeepsakeListener *-- KeepsakeEventType
KeepsakeListener -- KeepsakeContext

'Keepsake Variants
class BlackShawl extends IKeepsake
class SkullEarring extends IKeepsake
class OldSpikedCollar extends IKeepsake

@enduml