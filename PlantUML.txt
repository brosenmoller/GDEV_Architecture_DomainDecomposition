@enduml

@startuml
!theme carbon-gray

title Hades - UML
header
  Assignment for HKU Game Dev Architecture
  Weapon System : Ben Rosenm√∂ller
  KeepsakeSystem : Joeri van Alphen
endheader

'General Code
class Player
{
  +int Health
  -WeaponManager weaponManager;
  -KeepsakeManager keepsakeManager;
}


Player *-- WeaponManager
Player *-- KeepsakeManager

static class EventManager
{
  +Action<HitInfo hit> OnPlayerAttack;
  +Action OnPlayerSpawn;
}

class Blackboard
{
  +int PlayerHealth;
  +int PlayerMoneyAmount;
}

Blackboard .. Player
EventManager .. Player

'Weapon System
struct Damage
{
  +int MainDamage;
  +int BackstabDamage;
  +bool IsPoisned;
}

interface IDamageable
{
  +void TakeDamage(Damage damage);
}

abstract class Weapon
{
  +void ApplyEffect(out Damage damage);
}

class WeaponManager
{
  -Weapon[] unlockedWeapons;
  -Weapon[] equipedWeapons;
}

WeaponManager *-- Weapon
Weapon .. Damage
IDamageable .. Damage


'Keepsake System
interface IKeepsake
{
   +void Register();
   +void Unregister();
   -void OnEventCalled(KeepsakeContext context);
}

class KeepsakeManager
{
  -KeepsakeInventory Inventory;
  -KeepsakeListener Listener;
  -void OnEventCalled(KeepsakeContext context);
}

class KeepsakeInventory
{
  -Keepsake[] unlockedKeepsakes;
  -Keepsake[] equipedKeepsakes;
  
  +void Add(Keepsake keepsake);
  +void Set(int slot, Keepsake Keepsake);
}

class KeepsakeListener
{
  +Action<KeepsakeContext> OnEventCalled;
  -void OnDamageDealt(HitInfo info);
  -void OnSomethingHappened();
}

class KeepsakeContext
{
  +HealthContext Context;
  +HitInfo Hit;
}

IKeepsake o-- KeepsakeContext
KeepsakeManager *-- KeepsakeInventory
KeepsakeManager *-- KeepsakeListener
KeepsakeInventory *-- IKeepsake
KeepsakeListener .. KeepsakeContext
KeepsakeListener .. EventManager

'Keepsake Variants

@enduml